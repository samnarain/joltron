// generated by jsonenums -type=OutKind; DO NOT EDIT

package outgoing

import (
	"encoding/json"
	"fmt"
)

var (
	_OutKindNameToValue = map[string]OutKind{
		"state":    state,
		"update":   update,
		"progress": progress,
		"result":   result,
	}

	_OutKindValueToName = map[OutKind]string{
		state:    "state",
		update:   "update",
		progress: "progress",
		result:   "result",
	}
)

func init() {
	var v OutKind
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_OutKindNameToValue = map[string]OutKind{
			interface{}(state).(fmt.Stringer).String():    state,
			interface{}(update).(fmt.Stringer).String():   update,
			interface{}(progress).(fmt.Stringer).String(): progress,
			interface{}(result).(fmt.Stringer).String():   result,
		}
	}
}

// MarshalJSON is generated so OutKind satisfies json.Marshaler.
func (r OutKind) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _OutKindValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid OutKind: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so OutKind satisfies json.Unmarshaler.
func (r *OutKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OutKind should be a string, got %s", data)
	}
	v, ok := _OutKindNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid OutKind %q", s)
	}
	*r = v
	return nil
}
